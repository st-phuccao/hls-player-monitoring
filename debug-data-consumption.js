/**
 * Debug script for Data Consumption Tracker
 * Ch·∫°y script n√†y trong console ƒë·ªÉ debug data consumption tracking
 */

// Function ƒë·ªÉ test t·∫•t c·∫£ c√°c method tracking
function debugDataConsumptionDetailed() {
    console.log('üîç DETAILED DATA CONSUMPTION DEBUG');
    console.log('=====================================');

    // 1. Ki·ªÉm tra tr·∫°ng th√°i c∆° b·∫£n
    console.log('1. Basic Status Check:');
    if (typeof dataConsumptionTracker !== 'undefined' && dataConsumptionTracker) {
        const debugInfo = dataConsumptionTracker.getDebugInfo();
        console.log('   ‚úÖ DataConsumptionTracker exists');
        console.log('   üìä Debug Info:', debugInfo);

        // 2. Ki·ªÉm tra HLS instance
        console.log('\n2. HLS Instance Check:');
        if (debugInfo.hasHLSInstance) {
            console.log('   ‚úÖ HLS Instance connected');
            if (typeof hlsPlayer !== 'undefined' && hlsPlayer) {
                console.log('   üì∫ HLS Player levels:', hlsPlayer.levels?.length || 0);
                console.log('   üì∫ Current level:', hlsPlayer.currentLevel);
                console.log('   üì∫ Auto level:', hlsPlayer.autoLevelEnabled);
            }
        } else {
            console.log('   ‚ùå No HLS Instance');
        }

        // 3. Ki·ªÉm tra Video Element
        console.log('\n3. Video Element Check:');
        if (typeof videoElement !== 'undefined' && videoElement) {
            console.log('   ‚úÖ Video Element exists');
            console.log('   üìπ Video src:', videoElement.src ? 'Set' : 'Not set');
            console.log('   üìπ Video duration:', videoElement.duration);
            console.log('   üìπ Video buffered ranges:', videoElement.buffered?.length || 0);

            // T√≠nh t·ªïng buffer
            let totalBuffered = 0;
            if (videoElement.buffered) {
                for (let i = 0; i < videoElement.buffered.length; i++) {
                    totalBuffered += videoElement.buffered.end(i) - videoElement.buffered.start(i);
                }
            }
            console.log('   üìπ Total buffered time:', totalBuffered.toFixed(2), 'seconds');
        } else {
            console.log('   ‚ùå No Video Element');
        }

        // 4. Test network interception
        console.log('\n4. Network Interception Test:');
        console.log('   üåê Testing XMLHttpRequest override...');
        const testXHR = new XMLHttpRequest();
        console.log('   üåê XMLHttpRequest type:', typeof testXHR);

        // 5. Simulate data loading
        console.log('\n5. Simulating Data Loading:');
        const beforeBytes = debugInfo.metrics.bytes_loaded;
        dataConsumptionTracker.simulateDataLoading();
        const afterDebugInfo = dataConsumptionTracker.getDebugInfo();
        const afterBytes = afterDebugInfo.metrics.bytes_loaded;
        console.log('   üìà Before:', (beforeBytes / 1024 / 1024).toFixed(2), 'MB');
        console.log('   üìà After:', (afterBytes / 1024 / 1024).toFixed(2), 'MB');
        console.log('   üìà Difference:', ((afterBytes - beforeBytes) / 1024 / 1024).toFixed(2), 'MB');

        // 6. Force update display
        console.log('\n6. Forcing Display Update:');
        dataConsumptionTracker.updateDataDisplay();
        console.log('   üîÑ Display update completed');

        // 7. Check panel existence
        console.log('\n7. Panel Existence Check:');
        const panel = document.getElementById('dataConsumptionPanel');
        if (panel) {
            console.log('   ‚úÖ Data Consumption Panel exists');
            const totalDataElement = panel.querySelector('#totalDataValue');
            const dataRateElement = panel.querySelector('#dataRateValue');
            const statusElement = panel.querySelector('#dataStatus');

            console.log('   üìä Total Data Display:', totalDataElement?.textContent || 'Not found');
            console.log('   üìä Data Rate Display:', dataRateElement?.textContent || 'Not found');
            console.log('   üìä Status Display:', statusElement?.textContent || 'Not found');
        } else {
            console.log('   ‚ùå Data Consumption Panel not found');
            console.log('   üîß Attempting to create panel...');
            dataConsumptionTracker.createDataPanel();
            dataConsumptionTracker.updateDataDisplay();
        }

    } else {
        console.log('   ‚ùå DataConsumptionTracker not found');
        console.log('   üîß Available global objects:', Object.keys(window).filter(key => key.includes('data') || key.includes('tracker')));
    }

    console.log('\n=====================================');
    console.log('üèÅ DEBUG COMPLETE');
}

// Function ƒë·ªÉ monitor data consumption real-time
function startDataConsumptionMonitoring(intervalMs = 5000) {
    console.log('üîÑ Starting real-time data consumption monitoring...');

    return setInterval(() => {
        if (typeof dataConsumptionTracker !== 'undefined' && dataConsumptionTracker) {
            const metrics = dataConsumptionTracker.getDataMetrics();
            console.log('üìä Real-time Data Metrics:', {
                totalGB: metrics.total_data_loaded.toFixed(3),
                rateMBps: metrics.data_rate.toFixed(2),
                efficiencyMBmin: metrics.data_efficiency.toFixed(2),
                bytesLoaded: (metrics.bytes_loaded / 1024 / 1024).toFixed(2) + ' MB'
            });
        }
    }, intervalMs);
}

// Function ƒë·ªÉ test v·ªõi stream th·∫≠t
function testWithRealStream() {
    console.log('üé¨ Testing with real stream...');

    if (typeof videoElement !== 'undefined' && videoElement && videoElement.src) {
        console.log('   üì∫ Video has source, attempting to play...');

        const playPromise = videoElement.play();
        if (playPromise) {
            playPromise.then(() => {
                console.log('   ‚úÖ Video playing, monitoring data...');

                // Monitor for 30 seconds
                let count = 0;
                const monitor = setInterval(() => {
                    count++;
                    if (dataConsumptionTracker) {
                        const metrics = dataConsumptionTracker.getDataMetrics();
                        console.log(`   üìä [${count}] Data: ${(metrics.bytes_loaded / 1024 / 1024).toFixed(2)} MB, Rate: ${metrics.data_rate.toFixed(2)} MB/s`);
                    }

                    if (count >= 6) { // 30 seconds
                        clearInterval(monitor);
                        console.log('   üèÅ Monitoring complete');
                    }
                }, 5000);

            }).catch(error => {
                console.log('   ‚ùå Play failed:', error);
            });
        }
    } else {
        console.log('   ‚ùå No video source available');
        console.log('   üí° Load a stream first using the "Load Stream" button');
    }
}

// Export functions to global scope
window.debugDataConsumptionDetailed = debugDataConsumptionDetailed;
window.startDataConsumptionMonitoring = startDataConsumptionMonitoring;
window.testWithRealStream = testWithRealStream;

console.log('üõ†Ô∏è Data Consumption Debug Tools Loaded');
console.log('Available functions:');
console.log('  - debugDataConsumptionDetailed()');
console.log('  - startDataConsumptionMonitoring(intervalMs)');
console.log('  - testWithRealStream()');